{
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console and stuff"
	},

	
	"Api Provider": {
		"prefix": "apiprovider",
		"body": [
			"import { ApiNetworkProvider } from \"@multiversx/sdk-network-providers\"",
			"const apiNetworkProvider = new ApiNetworkProvider(\"https://devnet-api.multiversx.com\");"
		],
		"description": "Create an API provider"
	},
	"Api Provider Proxy": {
		"prefix": "apiprovider-proxy",
		"body": [
			"import { ProxyNetworkProvider } from \"@multiversx/sdk-network-providers\"",
			"const proxyNetworkProvider = new ProxyNetworkProvider(\"https://devnet-gateway.multiversx.com\");"
		],
		"description": "Create an API provider on a proxy"
	},
	"Fetch network parameters": {
		"prefix": "fetchnetworkparams",
		"body": [
			"const networkConfig = await apiNetworkProvider.getNetworkConfig();",
			"console.log(networkConfig.MinGasPrice);",
			"console.log(networkConfig.ChainID);"
		],
		"description": "Fetch network parameters"
	},
	"Synchronizing an account objects": {
		"prefix": "fetchnetworkparams",
		"body": [
			"import { Account } from \"@multiversx/sdk-core\";",
			"const alice = new Account(addressOfAlice);",
			"const aliceOnNetwork = await apiNetworkProvider.getAccount(addressOfAlice);",
			"alice.update(aliceOnNetwork);",
			"console.log(\"Nonce:\", alice.nonce);",
			"console.log(\"Balance:\", alice.balance.toString());"
		],
		"description": "The following snippet fetches (from the Network) the nonce and the balance of an account, and updates the local representation of the account."
	},


	"Managing the sender nonce locally": {
		"prefix": "managesendernonce",
		"body": [
			"alice.incrementNonce();",
			"console.log(\"Nonce:\", alice.nonce);"
		],
		"description": "When sending a bunch of transactions, you usually have to first fetch the account nonce from the network (see above), then manage it locally (e.g. increment upon signing & broadcasting a transaction)"
	},
	"Managing the sender nonce locally --setNonce": {
		"prefix": "managesendernonce-setnonce",
		"body": [
			"notYetSignedTx.setNonce(alice.getNonceThenIncrement());",
			"console.log(\"Nonce:\", alice.nonce);"
		],
		"description": "When sending a bunch of transactions, you usually have to first fetch the account nonce from the network (see above), then manage it locally (e.g. increment upon signing & broadcasting a transaction)"
	},

	"EGLD transfers": {
		"prefix": "transfer-egld",
		"body": [
			"import { TokenTransfer } from \"@multiversx/sdk-core\";",
			"let firstTransfer = TokenTransfer.egldFromAmount(\"1.5\");",
			"let secondTransfer = TokenTransfer.egldFromBigInteger(\"1500000000000000000\");",
			"$2",
			"console.log(firstTransfer.valueOf(), secondTransfer.valueOf());",
			"console.log(firstTransfer.toPrettyString(), secondTransfer.toPrettyString());"
		],
		"description": "A TokenTransfer object for EGLD transfers (value movements)"
	},
	"transferring fungible tokens": {
		"prefix": "transfer-fungible",
		"body": [
			"const identifier = \"FOO-123456\";",
			"const numDecimals = 2;",
			"firstTransfer = TokenTransfer.fungibleFromAmount(identifier, \"1.5\", numDecimals);",
			"secondTransfer = TokenTransfer.fungibleFromBigInteger(identifier, \"4000\", numDecimals);",
			"$2",
			"console.log(firstTransfer.toString()); // Will output: 150.",
			"console.log(firstTransfer.toPrettyString()); // Will output: 1.50 FOO-123456.",
			"console.log(secondTransfer.toString()); // Will output: 4000.",
			"console.log(secondTransfer.toPrettyString()); // Will output: 40.00 FOO-123456."
		],
		"description": "A TokenTransfer object for transferring fungible tokens"
	},
	"transferring semi-fungible tokens": {
		"prefix": "transfer-semifungible",
		"body": [
			"const identifier = \"FOO-123456\";",
			"let nonce = 3;",
			"let quantity = 50;",
			"let transfer = TokenTransfer.semiFungible(identifier, nonce, quantity);"
		],
		"description": "A TokenTransfer object for transferring semi-fungible tokens"
	},
	"transferring non-fungible tokens --no-quantity": {
		"prefix": "transfer-nonfungible",
		"body": [
			"nonce = 7;",
			"transfer = TokenTransfer.nonFungible(identifier, nonce);"
		],
		"description": "A TokenTransfer object for transferring non-fungible tokens (the quantity doesn't need to be specified for NFTs, as the token is only one of its kind)"
	},
	"transferring meta-esdt tokens": {
		"prefix": "transfer-meta-esdt",
		"body": [
			"transfer = TokenTransfer.metaEsdtFromAmount(identifier, nonce, \"0.1\", numDecimals);"
		],
		"description": "A TokenTransfer object for transferring meta-esdt tokens"
	},


	"Preparing a simple transaction": {
		"prefix": "preparetransaction",
		"body": [
			"import { Transaction, TransactionPayload } from \"@multiversx/sdk-core\";",
			"",
			"const tx = new Transaction({",
			"\t\tdata: new TransactionPayload(\"helloWorld\"),",
			"\t\tgasLimit: 70000,",
			"\t\tsender: addressOfAlice,",
			"\t\treceiver: addressOfBob,",
			"\t\tvalue: TokenTransfer.egldFromAmount(1),",
			"\t\tchainID: \"D\"",
			"});",
			"$2",
			"tx.setNonce(alice.getNonceThenIncrement());"
		],
		"description": "Preparing a simple transaction"
	},
	"Broadcast using a network provider": {
		"prefix": "broadcast-withprovider",
		"body": [
			"let txHash = await proxyNetworkProvider.sendTransaction(tx);",
			"console.log(\"Hash:\", txHash);"
		],
		"description": "Broadcast using a network provider\nNote that the transaction must be signed before being broadcasted. Signing can be achieved using a signing provider."
	},
	"Broadcast using axios": {
		"prefix": "broadcast-withaxios",
		"body": [
			"import axios from \"axios\";",
			"import { TransactionWatcher } from \"@multiversx/sdk-core\";",
			"",
			"const apiNetworkProvider = new ApiNetworkProvider(\"https://devnet-api.multiversx.com\");",
			"const data = readyToBroadcastTx.toSendable();",
			"const url = \"https://devnet-api.multiversx.com/transactions\";",
			"const response = await axios.post(url, data, {",
			"\t\theaders: {",
			"\t\t\t\t\"Content-Type\": \"application/json\",",
			"\t\t},",
			"});",
			"let txHash = response.data.txHash;",
			"",
			"$BLOCK_COMMENT_START Wait for transaction completion (If the tx is available) $BLOCK_COMMENT_END",
			"const watcher = new TransactionWatcher(apiNetworkProvider);",
			"const transactionOnNetwork = await watcher.awaitCompleted(tx);",
			"",
			"$BLOCK_COMMENT_START If only the txHash is available $BLOCK_COMMENT_END",
			"const transactionOnNetwork = await watcher.awaitCompleted({ getHash: () => txHash });",
			"console.log(transactionOnNetwork);",
			"",
			"$BLOCK_COMMENT_START In order to wait for multiple transactions $BLOCK_COMMENT_END",
			"await Promise.all([watcher.awaitCompleted(tx1), watcher.awaitCompleted(tx2), watcher.awaitCompleted(tx3)]);"
		],
		"description": "Broadcast using axios"
	},


	"create a TransferTransactionsFactory": {
		"prefix": "create-trxfactory",
		"body": [
			"import { GasEstimator, TransferTransactionsFactory } from \"@multiversx/sdk-core\";",
			"const factory = new TransferTransactionsFactory(new GasEstimator());"
		],
		"description": "create a TransferTransactionsFactory"
	},
	"Single ESDT transfer": {
		"prefix": "transfer-single-esdt",
		"body": [
			"import { TokenTransfer } from \"@multiversx/sdk-core\";",
			"",
			"const transfer1 = TokenTransfer.fungibleFromAmount(\"TEST-8b028f\", \"100.00\", 2);",
			"",
			"const tx1 = factory.createESDTTransfer({",
			"\t\ttokenTransfer: transfer1,",
			"\t\tnonce: 7,",
			"\t\tsender: addressOfAlice,",
			"\t\treceiver: addressOfBob,",
			"\t\tchainID: \"D\"",
			"});"
		],
		"description": "Single ESDT transfer"
	},
	"Single NFT transfer": {
		"prefix": "transfer-single-nonfungible",
		"body": [
			"const transfer2 = TokenTransfer.nonFungible(\"TEST-38f249\", 1);",
			"",
			"const tx2 = factory.createESDTNFTTransfer({",
			"\t\ttokenTransfer: transfer2,",
			"\t\tnonce: 8,",
			"\t\tsender: addressOfAlice,",
			"\t\tdestination: addressOfBob,",
			"\t\tchainID: \"D\"",
			"});"
		],
		"description": "Single NFT transfer"
	},
	"Single SFT transfer": {
		"prefix": "transfer-single-sft",
		"body": [
			"const transfer3 = TokenTransfer.semiFungible(\"SEMI-9efd0f\", 1, 5);",
			"",
			"const tx3 = factory.createESDTNFTTransfer({",
			"\t\ttokenTransfer: transfer3,",
			"\t\tnonce: 9,",
			"\t\tsender: addressOfAlice,",
			"\t\tdestination: addressOfBob,",
			"\t\tchainID: \"D\"",
			"});"
		],
		"description": "Single SFT transfer"
	},
	"Multi ESDT / NFT transfer": {
		"prefix": "transfer-multi-esdt/nft",
		"body": [
			"const transfers = [transfer1, transfer2, transfer3];",
			"",
			"const tx4 = factory.createMultiESDTNFTTransfer({",
			"\t\ttokenTransfers: transfers,",
			"\t\tnonce: 10,",
			"\t\tsender: addressOfAlice,",
			"\t\tdestination: addressOfBob,",
			"\t\tchainID: \"D\"",
			"});"
		],
		"description": "Multi ESDT / NFT transfer"
	},


	"Load bytecode from file": {
		"prefix": "bytecodefromfile",
		"body": [
			"import { Code } from \"@multiversx/sdk-core\";",
			"import { promises } from \"fs\";",
			"",
			"let buffer = await promises.readFile(\"../contracts/counter.wasm\");",
			"let code = Code.fromBuffer(buffer);"
		],
		"description": "Load the bytecode from a file"
	},
	"Load bytecode from URL": {
		"prefix": "bytecodefromurl",
		"body": [
			"import axios from \"axios\";",
			"",
			"let response = await axios.get(\"https://github.com/multiversx/mx-sdk-js-core/raw/main/src/testdata/counter.wasm\", {",
			"\t\tresponseType: \"arraybuffer\",",
			"\t\ttransformResponse: [],",
			"\t\theaders: {",
			"\t\t\t\t\"Accept\": \"application/wasm\"",
			"\t\t}",
			"});",
			"",
			"buffer = Buffer.from(response.data);",
			"code = Code.fromBuffer(buffer);"
		],
		"description": "Load the bytecode from an URL"
	},
	"Create SmartContract object": {
		"prefix": "create-smartcontractobject",
		"body": [
			"import { SmartContract } from \"@multiversx/sdk-core\";",
			"let contract = new SmartContract();"
		],
		"description": "Create a SmartContract object"
	},
	"Prepare deploy transaction": {
		"prefix": "preparedeploytransaction",
		"body": [
			"import { CodeMetadata, Account, TransactionWatcher, ResultsParser } from \"@multiversx/sdk-core\";",
			"",
			"const deployerAddress = addressOfAlice;",
			"",
			"const deployTransaction = contract.deploy({",
			"\t\tdeployer: deployerAddress,",
			"\t\tcode: code,",
			"\t\tcodeMetadata: new CodeMetadata(/* set the parameters accordingly */),",
			"\t\tinitArguments: [/* set the initial arguments, if any */],",
			"\t\tgasLimit: 20000000,",
			"\t\tchainID: \"D\"",
			"});",
			"",
			"$BLOCK_COMMENT_START Then, set the transaction nonce $BLOCK_COMMENT_END",
			"$BLOCK_COMMENT_START Note that the account nonce must be synchronized beforehand. Also, locally increment the nonce of the deployer (optional) $BLOCK_COMMENT_END",
			"const deployer = new Account(deployerAddress);",
			"const deployerOnNetwork = await networkProvider.getAccount(deployerAddress);",
			"deployer.update(deployerOnNetwork);",
			"deployTransaction.setNonce(deployer.getNonceThenIncrement());",
			"",
			"",
			"$BLOCK_COMMENT_START Then sign the transaction using a wallet / signing provider of your choice (not shown here) $BLOCK_COMMENT_END",
			"$BLOCK_COMMENT_START Upon signing, you would usually compute the contract address (deterministically computable), as follows $BLOCK_COMMENT_END",
			"let contractAddress = SmartContract.computeAddress(deployTransaction.getSender(), deployTransaction.getNonce());",
			"console.log(\"Contract address:\", contractAddress.bech32());",
			"",
			"",
			"$BLOCK_COMMENT_START In order to broadcast the transaction and await its completion, use a network provider and a transaction watcher $BLOCK_COMMENT_END",
			"await networkProvider.sendTransaction(deployTransaction);",
			"let transactionOnNetwork = await new TransactionWatcher(networkProvider).awaitCompleted(deployTransaction);",
			"",
			"",
			"$BLOCK_COMMENT_START In the end, parse the results $BLOCK_COMMENT_END",
			"let { returnCode } = new ResultsParser().parseUntypedOutcome(transactionOnNetwork);",
			"console.log(\"Return code:\", returnCode);"
		],
		"description": "Prepare the deploy transaction"
	},


	"Load ABI from file": {
		"prefix": "abifromfile",
		"body": [
			"import { AbiRegistry, Address, SmartContract } from \"@multiversx/sdk-core\";",
			"import { promises } from \"fs\";",
			"",
			"let abiJson = await promises.readFile(\"../contracts/counter.abi.json\", { encoding: \"utf8\" });",
			"let abiObj = JSON.parse(abiJson);",
			"let abiRegistry = AbiRegistry.create(abiObj);",
			"let existingContractAddress = Address.fromBech32(\"erd1qqqqqqqqqqqqqpgq5sup58y38q3pwyqklagxmuraetshrqwpd8ssh0ssph\");",
			"let existingContract = new SmartContract({ address: existingContractAddress, abi: abiRegistry });"
		],
		"description": "Load the ABI from a file"
	},
	"Load ABI from URL": {
		"prefix": "abifromurl",
		"body": [
			"import axios from \"axios\";",
			"",
			"const response = await axios.get(\"https://github.com/multiversx/mx-sdk-js-core/raw/main/src/testdata/counter.abi.json\");",
			"abiRegistry = AbiRegistry.create(response.data);",
			"existingContract = new SmartContract({ address: existingContractAddress, abi: abiRegistry });"
		],
		"description": "Load the ABI from an URL"
	},
	"Contract queries": {
		"prefix": "contactqueries",
		"body": [
			"$BLOCK_COMMENT_START When the ABI is not available $BLOCK_COMMENT_END",
			"import { AddressValue, BigUIntType, BinaryCodec, ResultsParser, SmartContract, Interaction, AbiRegistry } from \"@multiversx/sdk-core\";",
			"",
			"let legacyDelegationContract = new SmartContract({",
			"\t\taddress: legacyDelegationContractAddress",
			"});",
			"",
			"let query = legacyDelegationContract.createQuery({",
			"\t\tfunc: \"getClaimableRewards\",",
			"\t\targs: [new AddressValue(addressOfFirstDevnetDelegator)]",
			"});",
			"",
			"let queryResponse = await networkProvider.queryContract(query);",
			"let bundle = new ResultsParser().parseUntypedQueryResponse(queryResponse);",
			"let firstValue = bundle.values[0];",
			"let decodedValue = new BinaryCodec().decodeTopLevel(firstValue, new BigUIntType());",
			"",
			"console.log(bundle.returnCode);",
			"console.log(bundle.returnMessage);",
			"console.log(bundle.values);",
			"console.log(decodedValue.valueOf().toFixed(0));",
			"",
			"$BLOCK_COMMENT_START Using Interaction, when the ABI is not available \nThen, parse the response as above $BLOCK_COMMENT_END",
			"let args = [new AddressValue(addressOfFirstDevnetDelegator)];",
			"query = new Interaction(legacyDelegationContract, \"getClaimableRewards\", args)",
			"\t\t.buildQuery();",
			"let queryResponseFromInteraction = await networkProvider.queryContract(query);",
			"console.assert(JSON.stringify(queryResponseFromInteraction) === JSON.stringify(queryResponse));",
			"",
			"$BLOCK_COMMENT_START When the ABI is available $BLOCK_COMMENT_END",
			"const legacyDelegationAbi = AbiRegistry.create({",
			"\t\t\"endpoints\": [",
			"\t\t\t\t{",
			"\t\t\t\t\t\t\"name\": \"getClaimableRewards\",",
			"\t\t\t\t\t\t\"inputs\": [{",
			"\t\t\t\t\t\t\t\t\"type\": \"Address\"",
			"\t\t\t\t\t\t}],",
			"\t\t\t\t\t\t\"outputs\": [{",
			"\t\t\t\t\t\t\t\t\"type\": \"BigUint\"",
			"\t\t\t\t\t\t}]",
			"\t\t\t\t}",
			"\t\t]",
			"});",
			"",
			"const getClaimableRewardsEndpoint = legacyDelegationAbi.getEndpoint\"getClaimableRewards\");",
			"",
			"query = legacyDelegationContract.createQuery({",
			"\t\tfunc: \"getClaimableRewards\",",
			"\t\targs: [new AddressValue(addressOfFirstDevnetDelegator)]",
			"});",
			"",
			"queryResponse = await networkProvider.queryContract(query);",
			"let { values } = new ResultsParser().parseQueryResponse(queryResponse, getClaimableRewardsEndpoint);",
			"console.log(values[0].valueOf().toFixed(0));",
			"",
			"$BLOCK_COMMENT_START Using \"Interaction\", when the ABI is available\nPrepare the interaction, check it, then build the query $BLOCK_COMMENT_END",
			"legacyDelegationContract = new SmartContract({",
			"\t\taddress: legacyDelegationContractAddress,",
			"\t\tabi: legacyDelegationAbi",
			"});",
			"",
			"let interaction = legacyDelegationContract.methods.getClaimableRewards([addressOfFirstDevnetDelegator]);",
			"query = interaction.check().buildQuery();",
			"",
			"$BLOCK_COMMENT_START Then, run the query and parse the results $BLOCK_COMMENT_END",
			"queryResponse = await networkProvider.queryContract(query);",
			"let typedBundle = new ResultsParser().parseQueryResponse(queryResponse, interaction.getEndpoint());",
			"console.log(typedBundle.values[0].valueOf().toFixed(0));",
			"",
			"$BLOCK_COMMENT_START Depending on the context, reinterpret (cast) the results $BLOCK_COMMENT_END",
			"let firstValueAsStruct = <Struct>firstValue;"
		],
		"description": "Contract queries"
	},
	"Contract interactions": {
		"prefix": "contactinteractions",
		"body": [
			"$BLOCK_COMMENT_START When the ABI is not available $BLOCK_COMMENT_END",
			"import { Address, AddressValue, SmartContract, U64Value, Interaction, TokenTransfer, U32Value, AbiRegistry, StringValue, VariadicValue } from \"@multiversx/sdk-core\";",
			"",
			"let contractAddress = new Address(\"erd1qqqqqqqqqqqqqpgq5sup58y38q3pwyqklagxmuraetshrqwpd8ssh0ssph\");",
			"let contract = new SmartContract({ address: contractAddress });",
			"",
			"let tx1 = contract.call({",
			"\t\tcaller: addressOfAlice,",
			"\t\tfunc: \"doSomething\",",
			"\t\tgasLimit: 5000000,",
			"\t\targs: [new AddressValue(addressOfCarol), new U64Value(1000)],",
			"\t\tchainID: \"D\"",
			"});",
			"",
			"tx1.setNonce(42);",
			"",
			"$BLOCK_COMMENT_START Using Interaction, when the ABI is not available $BLOCK_COMMENT_END",
			"let args = [new U32Value(1), new U32Value(2), new U32Value(3)];",
			"let interaction = new Interaction(contract, \"doSomethingWithValue\", args);",
			"",
			"let tx2 = interaction",
			"\t\t.withSender(addressOfAlice)",
			"\t\t.withNonce(43)",
			"\t\t.withValue(TokenTransfer.egldFromAmount(1))",
			"\t\t.withGasLimit(20000000)",
			"\t\t.withChainID(\"D\")",
			"\t\t.buildTransaction();",
			"",
			"$BLOCK_COMMENT_START Using Interaction, when the ABI is available $BLOCK_COMMENT_END",
			"let abiRegistry = AbiRegistry.create({",
			"\t\t\"endpoints\": [",
			"\t\t\t\t{",
			"\t\t\t\t\t\t\"name\": \"foobar\",",
			"\t\t\t\t\t\t\"inputs\": [],",
			"\t\t\t\t\t\t\"outputs\": []",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\t\t\"name\": \"doSomethingWithValue\",",
			"\t\t\t\t\t\t\"inputs\": [{",
			"\t\t\t\t\t\t\t\t\"type\": \"u32\"",
			"\t\t\t\t\t\t},",
			"\t\t\t\t\t\t{",
			"\t\t\t\t\t\t\t\t\"type\": \"u32\"",
			"\t\t\t\t\t\t},",
			"\t\t\t\t\t\t{",
			"\t\t\t\t\t\t\t\t\"type\": \"u32\"",
			"\t\t\t\t\t\t}],",
			"\t\t\t\t\t\t\"outputs\": []",
			"\t\t\t\t}",
			"\t\t]",
			"});",
			"",
			"contract = new SmartContract({ address: contractAddress, abi: abiRegistry });",
			"",
			"let tx3 = contract.methods.doSomethingWithValue([1, 2, 3])",
			"\t\t.withSender(addressOfAlice)",
			"\t\t.withNonce(44)",
			"\t\t.withValue(TokenTransfer.egldFromAmount(1))",
			"\t\t.withGasLimit(20000000)",
			"\t\t.withChainID(\"D\")",
			"\t\t.buildTransaction();",
			"",
			"$BLOCK_COMMENT_START an example using variadic arguments $BLOCK_COMMENT_END",
			"abiRegistry = AbiRegistry.create({",
			"\t\t\"endpoints\": [",
			"\t\t\t\t{",
			"\t\t\t\t\t\t\"name\": \"foobar\",",
			"\t\t\t\t\t\t\"inputs\": [],",
			"\t\t\t\t\t\t\"outputs\": []",
			"\t\t\t\t},",
			"\t\t\t\t{",
			"\t\t\t\t\t\t\"name\": \"doSomething\",",
			"\t\t\t\t\t\t\"inputs\": [{",
			"\t\t\t\t\t\t\t\t\"type\": \"counted-variadic<utf-8 string>\"",
			"\t\t\t\t\t\t},",
			"\t\t\t\t\t\t{",
			"\t\t\t\t\t\t\t\t\"type\": \"variadic<u64>\"",
			"\t\t\t\t\t\t}],",
			"\t\t\t\t\t\t\"outputs\": []",
			"\t\t\t\t}",
			"\t\t]",
			"});",
			"",
			"contract = new SmartContract({ address: contractAddress, abi: abiRegistry });",
			"",
			"let tx4 = contract.methods.doSomething(",
			"\t\t[",
			"\t\t\t\t// Counted variadic must be explicitly typed ",
			"\t\t\t\tVariadicValue.fromItemsCounted(StringValue.fromUTF8(\"foo\"), StringValue.fromUTF8(\"bar\")),",
			"\t\t\t\t// Regular variadic can be implicitly typed ",
			"\t\t\t\t1, 2, 3",
			"\t\t])",
			"\t\t.withSender(addressOfAlice)",
			"\t\t.withNonce(45)",
			"\t\t.withGasLimit(20000000)",
			"\t\t.withChainID(\"D\")",
			"\t\t.buildTransaction();"
		],
		"description": "Contract interactions"
	},
	"Parsing contract results": {
		"prefix": "parsecontractresult",
		"body": [
			"$BLOCK_COMMENT_START When the ABI is not available $BLOCK_COMMENT_END",
			"import { ResultsParser } from \"@multiversx/sdk-core\";",
			"",
			"let resultsParser = new ResultsParser();",
			"let txHash = \"d415901a9c88e564adf25b71b724b936b1274a2ad03e30752fdc79235af8ea3e\";",
			"let transactionOnNetwork = await networkProvider.getTransaction(txHash);",
			"let untypedBundle = resultsParser.parseUntypedOutcome(transactionOnNetwork);",
			"",
			"console.log(untypedBundle.returnCode, untypedBundle.values.length);",
			"",
			"$BLOCK_COMMENT_START Using Interaction, when the ABI is available $BLOCK_COMMENT_END",
			"let endpointDefinition = AbiRegistry.create({",
			"\t\t\"name\": \"counter\",",
			"\t\t\"endpoints\": [{",
			"\t\t\t\t\"name\": \"increment\",",
			"\t\t\t\t\"inputs\": [],",
			"\t\t\t\t\"outputs\": [{ \"type\": \"i64\" }]",
			"\t\t}]",
			"}).getEndpoint(\"increment\");",
			"",
			"transactionOnNetwork = await networkProvider.getTransaction(txHash);",
			"let typedBundle = resultsParser.parseOutcome(transactionOnNetwork, endpointDefinition);",
			"console.log(typedBundle.returnCode, typedBundle.values.length);",
			"",
			"$BLOCK_COMMENT_START Above, endpointDefinition is manually constructed. However, in practice, it can be obtained from the Interaction object, if available in the context $BLOCK_COMMENT_END",
			"endpointDefinition = interaction.getEndpoint();",
			"",
			"$BLOCK_COMMENT_START Alternatively, the endpointDefinition can also be obtained from the SmartContract object $BLOCK_COMMENT_END",
			"let endpointDefinition = smartContract.getEndpoint(\"myFunction\");"
		],
		"description": "Parsing contract results"
	},


	"Signing objects": {
		"prefix": "signingobjects",
		"body": [
			"$BLOCK_COMMENT_START Creating a UserSigner from a JSON wallet $BLOCK_COMMENT_END",
			"import { UserSigner, Transaction, SignableMessage } from \"@multiversx/sdk-wallet\";",
			"import { promises } from \"fs\";",
			"",
			"const fileContent = await promises.readFile(\"../testwallets/alice.json\", { encoding: \"utf8\" });",
			"const walletObject = JSON.parse(fileContent);",
			"let signer = UserSigner.fromWallet(walletObject, \"password\");",
			"",
			"$BLOCK_COMMENT_START Creating a UserSigner from a PEM file $BLOCK_COMMENT_END",
			"const pemText = await promises.readFile(\"../testwallets/alice.pem\", { encoding: \"utf8\" });",
			"signer = UserSigner.fromPem(pemText);",
			"",
			"$BLOCK_COMMENT_START Signing a transaction: $BLOCK_COMMENT_END",
			"const transaction = new Transaction({",
			"\t\tgasLimit: 50000,",
			"\t\tgasPrice: 1000000000,",
			"\t\tsender: addressOfAlice,",
			"\t\treceiver: addressOfBob,",
			"\t\tchainID: \"D\",",
			"\t\tversion: 1",
			"});",
			"",
			"const serializedTransaction = transaction.serializeForSigning();",
			"const transactionSignature = await signer.sign(serializedTransaction);",
			"transaction.applySignature(transactionSignature);",
			"",
			"console.log(\"Transaction signature\", transaction.getSignature().toString(\"hex\"));",
			"console.log(\"Transaction hash\", transaction.getHash().toString());",
			"",
			"$BLOCK_COMMENT_START Signing an arbitrary message $BLOCK_COMMENT_END",
			"let message = new SignableMessage({",
			"\t\tmessage: Buffer.from(\"hello\")",
			"});",
			"",
			"let serializedMessage = message.serializeForSigning();",
			"let messageSignature = await signer.sign(serializedMessage);",
			"message.applySignature(messageSignature);",
			"console.log(\"Message signature\", message.getSignature().toString(\"hex\"));"
		],
		"description": "Signing objects"
	},
	"Verifying signatures": {
		"prefix": "verifysignature",
		"body": [
			"$BLOCK_COMMENT_START Creating a UserVerifier $BLOCK_COMMENT_END",
			"import { UserVerifier } from \"@multiversx/sdk-wallet\";",
			"",
			"const aliceVerifier = UserVerifier.fromAddress(addressOfAlice);",
			"const bobVerifier = UserVerifier.fromAddress(addressOfBob);",
			"",
			"$BLOCK_COMMENT_START Suppose we have the following transaction $BLOCK_COMMENT_END",
			"const tx = Transaction.fromPlainObject({",
			"\t\tnonce: 42,",
			"\t\tvalue: \"12345\",",
			"\t\tsender: addressOfAlice.bech32(),",
			"\t\treceiver: addressOfBob.bech32(),",
			"\t\tgasPrice: 1000000000,",
			"\t\tgasLimit: 50000,",
			"\t\tchainID: \"D\",",
			"\t\tversion: 1,",
			"\t\tsignature: \"3c5eb2d1c9b3ab2f578541e62dcfa5008976d11f85644a48884a8a6c4d2980fa14954ab2924d6e67c051562488096d2e79cd3c0378edf234a52e648e672d1b0a\"",
			"});",
			"",
			"const serializedTx = tx.serializeForSigning();",
			"const txSignature = tx.getSignature();",
			"",
			"$BLOCK_COMMENT_START And / or the following message and signature $BLOCK_COMMENT_END",
			"message = new SignableMessage({ message: Buffer.from(\"hello\") });",
			"serializedMessage = message.serializeForSigning();",
			"messageSignature = Buffer.from(\"561bc58f1dc6b10de208b2d2c22c9a474ea5e8cabb59c3d3ce06bbda21cc46454aa71a85d5a60442bd7784effa2e062fcb8fb421c521f898abf7f5ec165e5d0f\", \"hex\");",
			"",
			"$BLOCK_COMMENT_START We can verify their signatures as follows $BLOCK_COMMENT_END",
			"console.log(\"Is signature of Alice?\", aliceVerifier.verify(serializedTx, txSignature));",
			"console.log(\"Is signature of Alice?\", aliceVerifier.verify(serializedMessage, messageSignature));",
			"console.log(\"Is signature of Bob?\", bobVerifier.verify(serializedTx, txSignature));",
			"console.log(\"Is signature of Bob?\", bobVerifier.verify(serializedMessage, messageSignature));"
		],
		"description": "Verifying signatures"
	},
	"Decoding transaction metadata": {
		"prefix": "decode-transaction-meta",
		"body": [
			"$BLOCK_COMMENT_START Using the transaction-decoder\nIn order to decode the metadata (function, arguments, transfers) from a transaction payload, do as follows $BLOCK_COMMENT_END",
			"import { TransactionDecoder, TransactionMetadata } from \"@multiversx/sdk-transaction-decoder\";",
			"",
			"let transactionOnNetwork = await networkProvider.getTransaction(txHash);",
			"let metadata = new TransactionDecoder().getTransactionMetadata({",
			"\t\tsender: transactionOnNetwork.sender.bech32(),",
			"\t\treceiver: transactionOnNetwork.receiver.bech32(),",
			"\t\tdata: transactionOnNetwork.data.toString(\"base64\"),",
			"\t\tvalue: transactionOnNetwork.value.toString(),",
			"\t\ttype: transactionOnNetwork.type",
			"});"
		],
		"description": "Decoding transaction metadata"
	}
}