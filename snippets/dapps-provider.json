{
	"The Web Wallet Provider": {
		"prefix": "mvs-web-wallet-provider",
		"body": [
			"$BLOCK_COMMENT_START In order to create an instance of the provider, do as follows $BLOCK_COMMENT_END",
			"import { WalletProvider, WALLET_PROVIDER_DEVNET } from \"@multiversx/sdk-web-wallet-provider\";",
			"",
			"const provider = new WalletProvider(WALLET_PROVIDER_DEVNET);"
    ],
		"description": "@multiversx/sdk-web-wallet-provider allows the users of a dApp to login and sign transactions using the Web Wallet."
  },
	"Login and logout": {
		"prefix": "mvs-login-logout",
		"body": [
			"$BLOCK_COMMENT_START ask the user to log in $BLOCK_COMMENT_END",
			"import { WalletProvider, WALLET_PROVIDER_DEVNET } from \"@multiversx/sdk-web-wallet-provider\";",
			"import qs from \"qs\";",
			"",
			"const provider = new WalletProvider(WALLET_PROVIDER_DEVNET);",
			"",
			"$BLOCK_COMMENT_START Once the user opens her wallet, the web wallet issues a redirected back to callbackUrl, along with the address of the user. You can get the address as follows $BLOCK_COMMENT_END",
			"const queryString = window.location.search.slice(1);",
			"const params = qs.parse(queryString);",
			"console.log(params.address);",
			"",
			"$BLOCK_COMMENT_START In order to log out, do as follows $BLOCK_COMMENT_END",
			"const callbackUrl = window.location.href.split(\"?\")[0];",
			"await provider.logout({ callbackUrl: callbackUrl });",
			"",
			"$BLOCK_COMMENT_START Sometimes, a dApp (and its backend) might want to reliably assign an off-chain user identity to a MultiversX address. In this context, the web wallet provider supports an extra parameter to the login() method: a custom authentication token, completely opaque to the web wallet, to be signed with the user's wallet, at login-time $BLOCK_COMMENT_END",
			"// An identity token, provided by an identity provider (server-side)",
			"// (e.g. Google ID, a custom identity token)",
			"const authToken = \"aaaabbbbaaaabbbb\";",
			"",
			"// A server-side handler used to acknowledge, validate and honour",
			"// the relationship between \"authToken\" and the MultiversX address of the user",
			"const callbackUrl = encodeURIComponent(\"https://my-dapp/on-wallet-login\");",
			"await provider.login({ callbackUrl, token: authToken });"
    ],
		"description": "Login and logout"
  },
	"Signing transactions": {
		"prefix": "mvs-sign-transaction",
		"body": [
			"import { Transaction } from\"@multiversx/sdk-core\";",
			"",
			"const firstTransaction = new Transaction({ ... });",
			"const secondTransaction = new Transaction({ ... });",
			"",
			"await provider.signTransactions(",
			"\t\t[firstTransaction, secondTransaction],",
			"\t\t{ callbackUrl: callbackUrl }",
			");",
			"",
			"$BLOCK_COMMENT_START Upon signing the transactions using the web wallet, the user is redirected back to callbackUrl, while the query string contains information about the transactions, including their signatures. The information can be used to reconstruct Transaction objects using getTransactionsFromWalletUrl() $BLOCK_COMMENT_END",
			"const plainSignedTransactions = provider.getTransactionsFromWalletUrl();",
			"for (const plainTransaction of plainSignedTransactions) {",
			"\t\tconst plainTransactionClone = structuredClone(plainTransaction);",
			"\t\tplainTransactionClone.data = Buffer.from(plainTransactionClone.data).toString(\"base64\");",
			"\t\tconst transaction = Transaction.fromPlainObject(plainTransactionClone);",
			"",
			"\t\t// \"transaction\" can now be broadcasted.",
			"}"
    ],
		"description": "Signing transactions"
  }
}